generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bitacora {
  id           Int       @id @default(autoincrement())
  usuario_id   Int?
  rol          String?   @db.VarChar(45)
  accion       String?   @db.VarChar(45)
  ip           String?   @db.VarChar(45)
  descripcion  String?   @db.VarChar(255)
  fecha_inicio DateTime? @default(now()) @db.DateTime(0)
  fecha_act    DateTime? @db.DateTime(0)

  usuarios usuarios? @relation(fields: [usuario_id], references: [id])

  @@index([usuario_id], map: "usuario_id")
}

model departamentos {
  id          Int      @id @default(autoincrement())
  nombre      String  @unique @db.VarChar(50) // Unique para evitar nombres duplicados
  descripcion String?  @db.VarChar(600)
  activo      Boolean  @default(true)

  usuarios usuarios[]
}

model documentos {
  id                   Int      @id @default(autoincrement())
  nombre               String
  descripcion          String?
  mime                 String   @db.VarChar(255)
  ruta                 String
  tipos_documentos_id  Int
  usuarios_id          Int
  fecha_subida         DateTime
}


  tipos_documentos tipos_documentos @relation(fields: [tipos_documentos_id], references: [id])
  usuarios         usuarios         @relation(fields: [usuarios_id], references: [id])

  @@index([tipos_documentos_id], map: "tipos_documentos_id")
  @@index([usuarios_id], map: "usuarios_id")
}

model periodos {
  id           Int       @id @default(autoincrement())
  periodo      String    @unique @db.VarChar(50) // Se evita duplicación de nombres
  fecha_inicio DateTime  @db.Date
  fecha_final  DateTime  @db.Date
  activo       Boolean   @default(true)
}

model procesos {
  id               Int                 @id @default(autoincrement())
  estatus          procesos_estatus
  resultado        procesos_resultado?
  fecha_inicio     DateTime?           @db.Date
  fecha_fin        DateTime?           @db.Date
  departamentos_id Int
  periodos_id      Int

  departamentos departamentos @relation(fields: [departamentos_id], references: [id])
  periodos      periodos      @relation(fields: [periodos_id], references: [id])

  @@index([departamentos_id], map: "departamentos_id")
  @@index([periodos_id], map: "periodos_id")
}

model roles {
  id             Int        @id @default(autoincrement())
  tipo           roles_tipo
  descripcion    String?    @db.VarChar(280)
  activo         Boolean    @default(true)
  fecha_creacion DateTime   @default(now()) @db.DateTime(0)

  usuarios_has_roles usuarios_has_roles[]
}

model tipos_documentos {
  id   Int     @id @default(autoincrement())
  tipo String  @unique @db.VarChar(50) // Cada tipo de documento debe ser único

  documentos documentos[]
}

model usuarios {
  id               Int     @id @default(autoincrement())
  nombre           String  @db.VarChar(50)
  apellidos        String  @db.VarChar(100)
  email            String  @unique(map: "email") @db.VarChar(100)
  password         String  @db.VarChar(255) // Ampliado para almacenar hashes seguros
  departamentos_id Int?
  activo           Boolean @default(true)

  documentos         documentos[]
  usuarios_has_roles usuarios_has_roles[]
  departamentos      departamentos? @relation(fields: [departamentos_id], references: [id])
}

model usuarios_has_roles {
  usuarios_id Int
  roles_id    Int

  usuarios usuarios @relation(fields: [usuarios_id], references: [id])
  roles    roles    @relation(fields: [roles_id], references: [id])

  @@id([usuarios_id, roles_id])
}

enum procesos_estatus {
  en_proceso
  terminado
}

enum roles_tipo {
  admin
  capturista
  revisor
}

enum procesos_resultado {
  aprobado
  rechazado
  en_revision @map("en_revisión")
}
